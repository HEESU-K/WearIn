"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

'''
superUser : admin / admin@clothshare.com / 1111
'''


from pathlib import Path
from os.path import dirname, abspath, join
import os

'''
__file__ : 현재 실행 중인 스크릡트의 경로를 보유하는 Python의 특수 변수(현재 settings.py 파일 참조)
abspath(__file__) : os.path 모듈의 함수, __file__에 저장된 상대 경로를 절대경로로 변환
dirname(path) : os.path 모듈의 함수, 주어진 경로의 디렉토리 이름을 반환 / 디렉토리 트리 탐색 가능
.resolve() : 해당 경로를 절대 경로로 변환
'''
#BASE_DIR = dirname(abspath(__file__))
#CONTENT_DIR = join(BASE_DIR, 'tmp')



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-jp=9gs5#y2yi$au4zx6vwmm5bp4g2b$w(_sv4t(dlih4l%lb36'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'channels',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #아래 부터는 직접 추가한 내용
    'sharecloth.apps.ShareclothConfig', # ShareclothConfig 앱 등록
    'account_test.apps.AccountTestConfig', # 회원가입/로그인 기능 확인 후 삭제 
    'bootstrap4',
    'django_extensions',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        #'DIRS': [BASE_DIR / 'templates'], # 템플릿을 저장할 디렉터리 설정
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        # BASE_DIR ==> c:\yncproject\clothshare
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

ASGI_APPLICATION = 'clothshare.asgi.application'
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('127.0.0.1', 6379)],
        },
    },
}


# Database 
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases



'''
# 메인 DB 연결 코드
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'test',
        'USER' : 'users',
        'PASSWORD' : '3mintsout!',
        'HOST' : '132.226.16.219',
        'PORT' : '3306',
    }
}
'''

# 계정 시스템 테스트 용 DB 연결 코드 
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]



ENABLE_USER_ACTIVATION = True
DISABLE_USERNAME = False
LOGIN_VIA_EMAIL = False
LOGIN_VIA_EMAIL_OR_USERNAME = True
LOGIN_REDIRECT_URL = 'index'
LOGIN_URL = 'accounts:log_in'
USE_REMEMBER_ME = False

RESTORE_PASSWORD_VIA_EMAIL_OR_USERNAME = True
EMAIL_ACTIVATION_AFTER_CHANGING = True

MESSAGE_STORAGE = 'django.contrib.messages.storage.cookie.CookieStorage'



# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'ko-kr'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_TZ = True



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# STATICFILES_DIRS / STATIC_ROOT 설정 => HTML에 CSS 파일 적용  (정적 파일(ex.css)의 위치 지정)
STATICFILES_DIRS = [ # 장고가 정적 파일을 찾을 있는 디렉토리 목록 제공 (ex. CSS/JS/image)
    os.path.join(BASE_DIR, 'static'), 
]
 
STATIC_ROOT=os.path.join(BASE_DIR,'staticfiles') 
# 정적 파일을 수집하고 한 곳에 모을 디렉토리 지정 / staticfiles => 장고 프로젝트 루트 디렉토리에 생성됨

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field


DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



''' CREATE ACCOUNT CODE'''

SIGN_UP_FIELDS = ['username', 'first_name', 'last_name', 'email', 'password1', 'password2']

if DISABLE_USERNAME:
    SIGN_UP_FIELDS = ['first_name', 'last_name', 'email', 'password1', 'password2']


EMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'
# django.core.mail 모듈 : Django의 이메일 발솔 기능
EMAIL_FILE_PATH = join(BASE_DIR, 'tmp/emails')
EMAIL_HOST_USER = 'sendEmail@test.com'
DEFAULT_FROM_EMAIL = 'sendEmail@test.com'

''''''''''''''''''''''''''


'''상품 등록에서 이미지 파일 업로드를 위해 Django에서 미디어 파일 설정 추가'''

MEDIA_URL = '/media/' 
# 미디어 파일에 접근할 때 사용할 URL 지정
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/images') # 
# 실제 미디어 파일이 서버의 어느 경로에 저장될지 지정 == 파일 시스템의 경로 사용

''''''''''''''''''''''''''

LOGIN_URL = '/log_in/' 
# @login_required 데코레이터를 사용 -> mypage 접속 시 로그인되지 않은 사용자는 로그인 페이지로 리디렉션